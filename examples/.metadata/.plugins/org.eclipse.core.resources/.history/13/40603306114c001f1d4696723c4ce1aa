
LED_Blinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080011e8  080011e8  000111e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001260  08001260  00011268  2**0
                  CONTENTS
  4 .ARM          00000000  08001260  08001260  00011268  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001260  08001268  00011268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001260  08001260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001264  08001264  00011264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010cc  20000000  08001268  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010cc  08001268  000210cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ad4  00000000  00000000  00011291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a4d  00000000  00000000  00013d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000280  00000000  00000000  000147b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000228  00000000  00000000  00014a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199b6  00000000  00000000  00014c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000032d3  00000000  00000000  0002e616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cfee  00000000  00000000  000318e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000be8d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008a8  00000000  00000000  000be928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080011d0 	.word	0x080011d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080011d0 	.word	0x080011d0

08000170 <Task0>:

taskHandleT ptask1_Handle,ptask2_Handle;


void Task0(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	 while(1){
		 count0++;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <Task0+0x1c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	4a04      	ldr	r2, [pc, #16]	; (800018c <Task0+0x1c>)
 800017c:	6013      	str	r3, [r2, #0]
		 led_toggle(GREEN);
 800017e:	200c      	movs	r0, #12
 8000180:	f000 f904 	bl	800038c <led_toggle>
		 osThreadSleep(100);
 8000184:	2064      	movs	r0, #100	; 0x64
 8000186:	f000 feab 	bl	8000ee0 <osThreadSleep>
		 count0++;
 800018a:	e7f3      	b.n	8000174 <Task0+0x4>
 800018c:	2000001c 	.word	0x2000001c

08000190 <Task1>:
}



void Task1(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0

	 while(1){
   		count1++;
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <Task1+0x1c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	4a04      	ldr	r2, [pc, #16]	; (80001ac <Task1+0x1c>)
 800019c:	6013      	str	r3, [r2, #0]
		led_toggle(ORANGE);
 800019e:	200d      	movs	r0, #13
 80001a0:	f000 f8f4 	bl	800038c <led_toggle>
		osThreadSleep(200);
 80001a4:	20c8      	movs	r0, #200	; 0xc8
 80001a6:	f000 fe9b 	bl	8000ee0 <osThreadSleep>
   		count1++;
 80001aa:	e7f3      	b.n	8000194 <Task1+0x4>
 80001ac:	20000020 	.word	0x20000020

080001b0 <Task2>:

	 }
}

void Task2(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0

	 while(1){
		 count2++;
 80001b4:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <Task2+0x20>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	3301      	adds	r3, #1
 80001ba:	4a05      	ldr	r2, [pc, #20]	; (80001d0 <Task2+0x20>)
 80001bc:	6013      	str	r3, [r2, #0]
		 led_toggle(RED);
 80001be:	200e      	movs	r0, #14
 80001c0:	f000 f8e4 	bl	800038c <led_toggle>
   		 osThreadSleep(500);
 80001c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001c8:	f000 fe8a 	bl	8000ee0 <osThreadSleep>
		 count2++;
 80001cc:	e7f2      	b.n	80001b4 <Task2+0x4>
 80001ce:	bf00      	nop
 80001d0:	20000024 	.word	0x20000024

080001d4 <Task3>:
	 }

}

void Task3(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	 while(1){

   		 count3++;
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <Task3+0x20>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <Task3+0x20>)
 80001e0:	6013      	str	r3, [r2, #0]
 		 led_toggle(BLUE);
 80001e2:	200f      	movs	r0, #15
 80001e4:	f000 f8d2 	bl	800038c <led_toggle>
   		 osThreadSleep(1000);
 80001e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ec:	f000 fe78 	bl	8000ee0 <osThreadSleep>
   		 count3++;
 80001f0:	e7f2      	b.n	80001d8 <Task3+0x4>
 80001f2:	bf00      	nop
 80001f4:	20000028 	.word	0x20000028

080001f8 <userIdleHook>:





void userIdleHook(void){
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0

	IdleHookcount++;
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <userIdleHook+0x18>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	3301      	adds	r3, #1
 8000202:	4a03      	ldr	r2, [pc, #12]	; (8000210 <userIdleHook+0x18>)
 8000204:	6013      	str	r3, [r2, #0]

}
 8000206:	bf00      	nop
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000034 	.word	0x20000034

08000214 <periodicTask1>:


void periodicTask1(void){
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

	pcount1++;
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <periodicTask1+0x18>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	4a03      	ldr	r2, [pc, #12]	; (800022c <periodicTask1+0x18>)
 8000220:	6013      	str	r3, [r2, #0]

}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	2000002c 	.word	0x2000002c

08000230 <periodicTask2>:

void periodicTask2(void){
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0

	pcount2++;
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <periodicTask2+0x18>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	3301      	adds	r3, #1
 800023a:	4a03      	ldr	r2, [pc, #12]	; (8000248 <periodicTask2+0x18>)
 800023c:	6013      	str	r3, [r2, #0]

}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000030 	.word	0x20000030

0800024c <main>:




int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
   	osKernelInit();
 8000250:	f000 fc46 	bl	8000ae0 <osKernelInit>
	leds_init();
 8000254:	f000 f85c 	bl	8000310 <leds_init>
	uart_init(USART2,115200);
 8000258:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800025c:	481e      	ldr	r0, [pc, #120]	; (80002d8 <main+0x8c>)
 800025e:	f000 f8b1 	bl	80003c4 <uart_init>
	uart_write_string(USART2, "Hello from my RTOS");
 8000262:	491e      	ldr	r1, [pc, #120]	; (80002dc <main+0x90>)
 8000264:	481c      	ldr	r0, [pc, #112]	; (80002d8 <main+0x8c>)
 8000266:	f000 f98c 	bl	8000582 <uart_write_string>

	task0_Handle=osKernelCreateTask(&Task0,10);
 800026a:	210a      	movs	r1, #10
 800026c:	481c      	ldr	r0, [pc, #112]	; (80002e0 <main+0x94>)
 800026e:	f000 fb23 	bl	80008b8 <osKernelCreateTask>
 8000272:	4603      	mov	r3, r0
 8000274:	461a      	mov	r2, r3
 8000276:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <main+0x98>)
 8000278:	701a      	strb	r2, [r3, #0]
	task1_Handle=osKernelCreateTask(&Task1,10);
 800027a:	210a      	movs	r1, #10
 800027c:	481a      	ldr	r0, [pc, #104]	; (80002e8 <main+0x9c>)
 800027e:	f000 fb1b 	bl	80008b8 <osKernelCreateTask>
 8000282:	4603      	mov	r3, r0
 8000284:	461a      	mov	r2, r3
 8000286:	4b19      	ldr	r3, [pc, #100]	; (80002ec <main+0xa0>)
 8000288:	701a      	strb	r2, [r3, #0]
	task2_Handle=osKernelCreateTask(&Task2,10);
 800028a:	210a      	movs	r1, #10
 800028c:	4818      	ldr	r0, [pc, #96]	; (80002f0 <main+0xa4>)
 800028e:	f000 fb13 	bl	80008b8 <osKernelCreateTask>
 8000292:	4603      	mov	r3, r0
 8000294:	461a      	mov	r2, r3
 8000296:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <main+0xa8>)
 8000298:	701a      	strb	r2, [r3, #0]
	task3_Handle=osKernelCreateTask(&Task3,10);
 800029a:	210a      	movs	r1, #10
 800029c:	4816      	ldr	r0, [pc, #88]	; (80002f8 <main+0xac>)
 800029e:	f000 fb0b 	bl	80008b8 <osKernelCreateTask>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <main+0xb0>)
 80002a8:	701a      	strb	r2, [r3, #0]

	ptask1_Handle= osKernelCreatePeriodc_Task(&periodicTask1,3000);
 80002aa:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002ae:	4814      	ldr	r0, [pc, #80]	; (8000300 <main+0xb4>)
 80002b0:	f000 fbb4 	bl	8000a1c <osKernelCreatePeriodc_Task>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <main+0xb8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	ptask2_Handle= osKernelCreatePeriodc_Task(&periodicTask2,5000);
 80002bc:	f241 3188 	movw	r1, #5000	; 0x1388
 80002c0:	4811      	ldr	r0, [pc, #68]	; (8000308 <main+0xbc>)
 80002c2:	f000 fbab 	bl	8000a1c <osKernelCreatePeriodc_Task>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <main+0xc0>)
 80002cc:	701a      	strb	r2, [r3, #0]

	osKernelLaunch();
 80002ce:	f000 fc17 	bl	8000b00 <osKernelLaunch>
 80002d2:	2300      	movs	r3, #0

}
 80002d4:	4618      	mov	r0, r3
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40004400 	.word	0x40004400
 80002dc:	0800124c 	.word	0x0800124c
 80002e0:	08000171 	.word	0x08000171
 80002e4:	20000038 	.word	0x20000038
 80002e8:	08000191 	.word	0x08000191
 80002ec:	20000039 	.word	0x20000039
 80002f0:	080001b1 	.word	0x080001b1
 80002f4:	2000003a 	.word	0x2000003a
 80002f8:	080001d5 	.word	0x080001d5
 80002fc:	2000003b 	.word	0x2000003b
 8000300:	08000215 	.word	0x08000215
 8000304:	2000003c 	.word	0x2000003c
 8000308:	08000231 	.word	0x08000231
 800030c:	2000003d 	.word	0x2000003d

08000310 <leds_init>:
		-Orange -->PD13
		-Red    -->PD14
		-Bleu   -->PD15
*/

void leds_init(void){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

	RCC ->  AHB1ENR   |= RCC_AHB1ENR_GPIODEN; //(1U<<3)
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <leds_init+0x74>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	4a1a      	ldr	r2, [pc, #104]	; (8000384 <leds_init+0x74>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6313      	str	r3, [r2, #48]	; 0x30


	// configure PIN 12,13,14,15 IN PORTD as output

	GPIOD -> MODER = GPIO_MODER_MODER12_0 ;
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <leds_init+0x78>)
 8000322:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000326:	601a      	str	r2, [r3, #0]

	GPIOD -> MODER &= ~(GPIO_MODER_MODER12_1) ;
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <leds_init+0x78>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a16      	ldr	r2, [pc, #88]	; (8000388 <leds_init+0x78>)
 800032e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000332:	6013      	str	r3, [r2, #0]

	GPIOD -> MODER |= GPIO_MODER_MODER13_0 ;
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <leds_init+0x78>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <leds_init+0x78>)
 800033a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800033e:	6013      	str	r3, [r2, #0]

	GPIOD -> MODER &= ~(GPIO_MODER_MODER13_1) ;
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <leds_init+0x78>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <leds_init+0x78>)
 8000346:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800034a:	6013      	str	r3, [r2, #0]

	GPIOD -> MODER |= GPIO_MODER_MODER14_0 ;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <leds_init+0x78>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <leds_init+0x78>)
 8000352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000356:	6013      	str	r3, [r2, #0]

	GPIOD -> MODER &= ~(GPIO_MODER_MODER14_1) ;
 8000358:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <leds_init+0x78>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <leds_init+0x78>)
 800035e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000362:	6013      	str	r3, [r2, #0]

	GPIOD -> MODER |= GPIO_MODER_MODER15_0 ;
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <leds_init+0x78>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a07      	ldr	r2, [pc, #28]	; (8000388 <leds_init+0x78>)
 800036a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800036e:	6013      	str	r3, [r2, #0]

	GPIOD -> MODER &= ~(GPIO_MODER_MODER15_1) ;
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <leds_init+0x78>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <leds_init+0x78>)
 8000376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800037a:	6013      	str	r3, [r2, #0]





}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40023800 	.word	0x40023800
 8000388:	40020c00 	.word	0x40020c00

0800038c <led_toggle>:

}



void led_toggle(LedColor led){
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	//^=: This is the bitwise XOR
    GPIOD->ODR ^= (1U << led);  // Toggle LED
 8000396:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <led_toggle+0x28>)
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	4904      	ldr	r1, [pc, #16]	; (80003b4 <led_toggle+0x28>)
 80003a4:	4053      	eors	r3, r2
 80003a6:	614b      	str	r3, [r1, #20]


}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40020c00 	.word	0x40020c00

080003b8 <uart_rxlntCallback>:
void uart_write(USART_TypeDef* UART ,int ch);

void USART2_IRQHandler(void);

// Provide a weak implementation of the callback function
__attribute__((weak)) void uart_rxlntCallback(void) {
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
    // Default implementation: do nothing
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <uart_init>:




//Initialize RX and TX of UART peripheral
void uart_init(USART_TypeDef* UART,uint32_t  BaudRate ){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
	//enable bus clock access for PORTA because usart2_tx_rx is connected to PA2-PA3
	if (UART == USART2){
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a5a      	ldr	r2, [pc, #360]	; (800053c <uart_init+0x178>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d134      	bne.n	8000440 <uart_init+0x7c>
			//enable bus clock access for PORTA because usart2_tx_rx is connected to PA2-PA3
			RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // RCC -> APB2ENR |= (1U <<0);
 80003d6:	4b5a      	ldr	r3, [pc, #360]	; (8000540 <uart_init+0x17c>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a59      	ldr	r2, [pc, #356]	; (8000540 <uart_init+0x17c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30

			//enable bus clock access for usart2

			RCC -> APB1ENR |= RCC_APB1ENR_USART2EN; //(1U<17)
 80003e2:	4b57      	ldr	r3, [pc, #348]	; (8000540 <uart_init+0x17c>)
 80003e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003e6:	4a56      	ldr	r2, [pc, #344]	; (8000540 <uart_init+0x17c>)
 80003e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ec:	6413      	str	r3, [r2, #64]	; 0x40

			//set PA2 mode to alternate function mode
			 GPIOA -> MODER |=  GPIO_MODER_MODER2_1;
 80003ee:	4b55      	ldr	r3, [pc, #340]	; (8000544 <uart_init+0x180>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a54      	ldr	r2, [pc, #336]	; (8000544 <uart_init+0x180>)
 80003f4:	f043 0320 	orr.w	r3, r3, #32
 80003f8:	6013      	str	r3, [r2, #0]

			 GPIOA -> MODER &= ~ (GPIO_MODER_MODER2_0);
 80003fa:	4b52      	ldr	r3, [pc, #328]	; (8000544 <uart_init+0x180>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a51      	ldr	r2, [pc, #324]	; (8000544 <uart_init+0x180>)
 8000400:	f023 0310 	bic.w	r3, r3, #16
 8000404:	6013      	str	r3, [r2, #0]

				//GPIOA->OSPEEDR |= 0x000000A0; // Set pin 2/3 to high speed mode (0b10)

			//set PA3 mode to alternate function mode
			 GPIOA -> MODER |=  GPIO_MODER_MODER3_1;
 8000406:	4b4f      	ldr	r3, [pc, #316]	; (8000544 <uart_init+0x180>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a4e      	ldr	r2, [pc, #312]	; (8000544 <uart_init+0x180>)
 800040c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000410:	6013      	str	r3, [r2, #0]

			 GPIOA -> MODER &= ~ (GPIO_MODER_MODER3_0);
 8000412:	4b4c      	ldr	r3, [pc, #304]	; (8000544 <uart_init+0x180>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a4b      	ldr	r2, [pc, #300]	; (8000544 <uart_init+0x180>)
 8000418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800041c:	6013      	str	r3, [r2, #0]

			//set PA2 alternate function type to UART_TX (AF07)
			// AFR[0] is AFR LOW REGISTRE
			 GPIOA -> AFR[0] |= 0X00000000;
 800041e:	4b49      	ldr	r3, [pc, #292]	; (8000544 <uart_init+0x180>)
 8000420:	4a48      	ldr	r2, [pc, #288]	; (8000544 <uart_init+0x180>)
 8000422:	6a1b      	ldr	r3, [r3, #32]
 8000424:	6213      	str	r3, [r2, #32]

			 GPIOA -> AFR[0] |= 0X00000700;
 8000426:	4b47      	ldr	r3, [pc, #284]	; (8000544 <uart_init+0x180>)
 8000428:	6a1b      	ldr	r3, [r3, #32]
 800042a:	4a46      	ldr	r2, [pc, #280]	; (8000544 <uart_init+0x180>)
 800042c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000430:	6213      	str	r3, [r2, #32]

			//set PA3 alternate function type to UART_RX (AF07)
			 GPIOA -> AFR[0] |= 0X00007000;}
 8000432:	4b44      	ldr	r3, [pc, #272]	; (8000544 <uart_init+0x180>)
 8000434:	6a1b      	ldr	r3, [r3, #32]
 8000436:	4a43      	ldr	r2, [pc, #268]	; (8000544 <uart_init+0x180>)
 8000438:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800043c:	6213      	str	r3, [r2, #32]
 800043e:	e068      	b.n	8000512 <uart_init+0x14e>
	else if(UART == USART1){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a41      	ldr	r2, [pc, #260]	; (8000548 <uart_init+0x184>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d130      	bne.n	80004aa <uart_init+0xe6>
			RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000448:	4b3d      	ldr	r3, [pc, #244]	; (8000540 <uart_init+0x17c>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a3c      	ldr	r2, [pc, #240]	; (8000540 <uart_init+0x17c>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
			RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8000454:	4b3a      	ldr	r3, [pc, #232]	; (8000540 <uart_init+0x17c>)
 8000456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000458:	4a39      	ldr	r2, [pc, #228]	; (8000540 <uart_init+0x17c>)
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	6453      	str	r3, [r2, #68]	; 0x44

			 GPIOA -> MODER |=  GPIO_MODER_MODER9_1;
 8000460:	4b38      	ldr	r3, [pc, #224]	; (8000544 <uart_init+0x180>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a37      	ldr	r2, [pc, #220]	; (8000544 <uart_init+0x180>)
 8000466:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800046a:	6013      	str	r3, [r2, #0]
			 GPIOA -> MODER &= ~ (GPIO_MODER_MODER9_0);
 800046c:	4b35      	ldr	r3, [pc, #212]	; (8000544 <uart_init+0x180>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a34      	ldr	r2, [pc, #208]	; (8000544 <uart_init+0x180>)
 8000472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000476:	6013      	str	r3, [r2, #0]

			 GPIOA -> MODER |=  GPIO_MODER_MODER10_1;
 8000478:	4b32      	ldr	r3, [pc, #200]	; (8000544 <uart_init+0x180>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a31      	ldr	r2, [pc, #196]	; (8000544 <uart_init+0x180>)
 800047e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000482:	6013      	str	r3, [r2, #0]
			 GPIOA -> MODER &= ~ (GPIO_MODER_MODER10_0);
 8000484:	4b2f      	ldr	r3, [pc, #188]	; (8000544 <uart_init+0x180>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a2e      	ldr	r2, [pc, #184]	; (8000544 <uart_init+0x180>)
 800048a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800048e:	6013      	str	r3, [r2, #0]

			 GPIOA -> AFR[1] |= 0X00000700;
 8000490:	4b2c      	ldr	r3, [pc, #176]	; (8000544 <uart_init+0x180>)
 8000492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000494:	4a2b      	ldr	r2, [pc, #172]	; (8000544 <uart_init+0x180>)
 8000496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800049a:	6253      	str	r3, [r2, #36]	; 0x24
			 GPIOA -> AFR[1] |= 0X00007000;
 800049c:	4b29      	ldr	r3, [pc, #164]	; (8000544 <uart_init+0x180>)
 800049e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a0:	4a28      	ldr	r2, [pc, #160]	; (8000544 <uart_init+0x180>)
 80004a2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80004a6:	6253      	str	r3, [r2, #36]	; 0x24
 80004a8:	e033      	b.n	8000512 <uart_init+0x14e>


		}else if(UART == USART3){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a27      	ldr	r2, [pc, #156]	; (800054c <uart_init+0x188>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d12f      	bne.n	8000512 <uart_init+0x14e>
			RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004b2:	4b23      	ldr	r3, [pc, #140]	; (8000540 <uart_init+0x17c>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a22      	ldr	r2, [pc, #136]	; (8000540 <uart_init+0x17c>)
 80004b8:	f043 0302 	orr.w	r3, r3, #2
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
			RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80004be:	4b20      	ldr	r3, [pc, #128]	; (8000540 <uart_init+0x17c>)
 80004c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c2:	4a1f      	ldr	r2, [pc, #124]	; (8000540 <uart_init+0x17c>)
 80004c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c8:	6413      	str	r3, [r2, #64]	; 0x40

			 GPIOB -> MODER |=  GPIO_MODER_MODER10_1;
 80004ca:	4b21      	ldr	r3, [pc, #132]	; (8000550 <uart_init+0x18c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a20      	ldr	r2, [pc, #128]	; (8000550 <uart_init+0x18c>)
 80004d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d4:	6013      	str	r3, [r2, #0]
				 GPIOB -> MODER &= ~ (GPIO_MODER_MODER10_0);
 80004d6:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <uart_init+0x18c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <uart_init+0x18c>)
 80004dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004e0:	6013      	str	r3, [r2, #0]

				 GPIOB -> MODER |=  GPIO_MODER_MODER11_1;
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <uart_init+0x18c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a1a      	ldr	r2, [pc, #104]	; (8000550 <uart_init+0x18c>)
 80004e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004ec:	6013      	str	r3, [r2, #0]
				 GPIOB -> MODER &= ~ (GPIO_MODER_MODER11_0);
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <uart_init+0x18c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a17      	ldr	r2, [pc, #92]	; (8000550 <uart_init+0x18c>)
 80004f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80004f8:	6013      	str	r3, [r2, #0]

				 GPIOB -> AFR[1] |= 0X00000700;
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <uart_init+0x18c>)
 80004fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fe:	4a14      	ldr	r2, [pc, #80]	; (8000550 <uart_init+0x18c>)
 8000500:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000504:	6253      	str	r3, [r2, #36]	; 0x24
				 GPIOB -> AFR[1] |= 0X00007000;
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <uart_init+0x18c>)
 8000508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <uart_init+0x18c>)
 800050c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000510:	6253      	str	r3, [r2, #36]	; 0x24


	 //configure the baudrate


    	uart_set_baudrate(AHB1_CLK,BaudRate,UART);
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	6839      	ldr	r1, [r7, #0]
 8000516:	480f      	ldr	r0, [pc, #60]	; (8000554 <uart_init+0x190>)
 8000518:	f000 f84b 	bl	80005b2 <uart_set_baudrate>


	 //configure transfert direction tx and rx

	 UART -> CR1 |= USART_CR1_TE | USART_CR1_RE ;//(1U<<3) | (1U<<2)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	f043 020c 	orr.w	r2, r3, #12
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	60da      	str	r2, [r3, #12]

	 //enable uart

	 UART -> CR1 |= USART_CR1_UE ;//(1U<<13)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	60da      	str	r2, [r3, #12]



}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40004400 	.word	0x40004400
 8000540:	40023800 	.word	0x40023800
 8000544:	40020000 	.word	0x40020000
 8000548:	40011000 	.word	0x40011000
 800054c:	40004800 	.word	0x40004800
 8000550:	40020400 	.word	0x40020400
 8000554:	00f42400 	.word	0x00f42400

08000558 <uart_write>:



 void uart_write(USART_TypeDef* UART, int ch){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	//*Make sure that the transmit data registre is empty
	while(!(UART -> SR & USART_SR_TXE)){}
 8000562:	bf00      	nop
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0f9      	beq.n	8000564 <uart_write+0xc>

	//* write to the transmit data registre
	UART -> DR = (ch & 0xFF);
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	b2da      	uxtb	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <uart_write_string>:
    buffer[i] = '\0';
}



 void uart_write_string(USART_TypeDef* UART , char *str) {
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	6039      	str	r1, [r7, #0]
    while (*str != '\0') {
 800058c:	e008      	b.n	80005a0 <uart_write_string+0x1e>
        uart_write(UART,*str);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	4619      	mov	r1, r3
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff ffdf 	bl	8000558 <uart_write>
        str++;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	603b      	str	r3, [r7, #0]
    while (*str != '\0') {
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1f2      	bne.n	800058e <uart_write_string+0xc>
    }
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <uart_set_baudrate>:
     // Call uart_write_string to transmit the string
     uart_write_string(UART,buffer);
 }


 static void uart_set_baudrate (uint32_t prephi_clk,uint32_t baudrate,USART_TypeDef* UART){
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b084      	sub	sp, #16
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	60f8      	str	r0, [r7, #12]
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
	 UART -> BRR = compute_baud_rate(prephi_clk, baudrate);
 80005be:	68b9      	ldr	r1, [r7, #8]
 80005c0:	68f8      	ldr	r0, [r7, #12]
 80005c2:	f000 f808 	bl	80005d6 <compute_baud_rate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]

 }
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <compute_baud_rate>:

 static uint16_t compute_baud_rate(uint32_t prephi_clk,uint32_t baudrate){
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
		     ===>
		     BRR = (clk/(16*baudrate) )*16 - we multiply by 16 to shift it by four bits
		         = (clk/baudrate)  or (clk/baudrate)+(1/2) for rounding
		  */

		 return (prephi_clk+(baudrate/2U))/baudrate;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	085a      	lsrs	r2, r3, #1
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	441a      	add	r2, r3
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ee:	b29b      	uxth	r3, r3

 	 }
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
	...

080005fc <USART2_IRQHandler>:

     return 1;  // Return success
 }


 void USART2_IRQHandler(void) {
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
     if (USART2->SR & USART_SR_RXNE) {  // Check if data is received
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <USART2_IRQHandler+0x78>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f003 0320 	and.w	r3, r3, #32
 800060a:	2b00      	cmp	r3, #0
 800060c:	d02d      	beq.n	800066a <USART2_IRQHandler+0x6e>
         if (rxInProgress && rxIndex < rxBufferSize) {
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <USART2_IRQHandler+0x7c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d023      	beq.n	8000660 <USART2_IRQHandler+0x64>
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <USART2_IRQHandler+0x80>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <USART2_IRQHandler+0x84>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d21d      	bcs.n	8000660 <USART2_IRQHandler+0x64>
             rxBuffer[rxIndex++] = USART2->DR;  // Read data from data register
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <USART2_IRQHandler+0x78>)
 8000626:	685c      	ldr	r4, [r3, #4]
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <USART2_IRQHandler+0x88>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <USART2_IRQHandler+0x80>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	1c59      	adds	r1, r3, #1
 8000632:	4812      	ldr	r0, [pc, #72]	; (800067c <USART2_IRQHandler+0x80>)
 8000634:	6001      	str	r1, [r0, #0]
 8000636:	4413      	add	r3, r2
 8000638:	b2e2      	uxtb	r2, r4
 800063a:	701a      	strb	r2, [r3, #0]
             if (rxIndex >= rxBufferSize) {
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <USART2_IRQHandler+0x80>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <USART2_IRQHandler+0x84>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	429a      	cmp	r2, r3
 8000646:	d310      	bcc.n	800066a <USART2_IRQHandler+0x6e>
                 rxInProgress = 0;  // Reception complete
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <USART2_IRQHandler+0x7c>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
                 USART2->CR1 &= ~USART_CR1_RXNEIE;  // Disable RXNE interrupt
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <USART2_IRQHandler+0x78>)
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <USART2_IRQHandler+0x78>)
 8000654:	f023 0320 	bic.w	r3, r3, #32
 8000658:	60d3      	str	r3, [r2, #12]
                 uart_rxlntCallback();  // Call user-defined callback function
 800065a:	f7ff fead 	bl	80003b8 <uart_rxlntCallback>
             if (rxIndex >= rxBufferSize) {
 800065e:	e004      	b.n	800066a <USART2_IRQHandler+0x6e>
             }
         } else {
             volatile uint8_t temp = USART2->DR;  // Read data to clear the RXNE flag
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <USART2_IRQHandler+0x78>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	71fb      	strb	r3, [r7, #7]
         }
     }
 }
 8000668:	e7ff      	b.n	800066a <USART2_IRQHandler+0x6e>
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	bf00      	nop
 8000674:	40004400 	.word	0x40004400
 8000678:	2000004c 	.word	0x2000004c
 800067c:	20000048 	.word	0x20000048
 8000680:	20000044 	.word	0x20000044
 8000684:	20000040 	.word	0x20000040

08000688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	2b00      	cmp	r3, #0
 8000698:	db0b      	blt.n	80006b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 021f 	and.w	r2, r3, #31
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <__NVIC_EnableIRQ+0x34>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	095b      	lsrs	r3, r3, #5
 80006a8:	2001      	movs	r0, #1
 80006aa:	fa00 f202 	lsl.w	r2, r0, r2
 80006ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	e000e100 	.word	0xe000e100

080006c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db0a      	blt.n	80006ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <__NVIC_SetPriority+0x4c>)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	440b      	add	r3, r1
 80006e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e8:	e00a      	b.n	8000700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4908      	ldr	r1, [pc, #32]	; (8000710 <__NVIC_SetPriority+0x50>)
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	3b04      	subs	r3, #4
 80006f8:	0112      	lsls	r2, r2, #4
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	440b      	add	r3, r1
 80006fe:	761a      	strb	r2, [r3, #24]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e100 	.word	0xe000e100
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <osKernelStackInit>:


int32_t TCB_STACK[NUM_OF_TASKS][STACKSIZE];


void osKernelStackInit(int i){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
   tcbs[i].stackPt =  &TCB_STACK[i][STACKSIZE -16];//StackPointer
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000722:	fb02 f303 	mul.w	r3, r2, r3
 8000726:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800072a:	4a61      	ldr	r2, [pc, #388]	; (80008b0 <osKernelStackInit+0x19c>)
 800072c:	1899      	adds	r1, r3, r2
 800072e:	4861      	ldr	r0, [pc, #388]	; (80008b4 <osKernelStackInit+0x1a0>)
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4403      	add	r3, r0
 800073c:	6019      	str	r1, [r3, #0]
	 TCB_STACK[i][STACKSIZE -1] =  0x01000000;
 800073e:	4a5c      	ldr	r2, [pc, #368]	; (80008b0 <osKernelStackInit+0x19c>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000746:	fb01 f303 	mul.w	r3, r1, r3
 800074a:	4413      	add	r3, r2
 800074c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000750:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000754:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACKSIZE-3] = 0x14141414;  //R14
 8000756:	4a56      	ldr	r2, [pc, #344]	; (80008b0 <osKernelStackInit+0x19c>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	4413      	add	r3, r2
 8000764:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8000768:	f04f 3214 	mov.w	r2, #336860180	; 0x14141414
 800076c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-4] = 0x12121212;  //R12
 800076e:	4a50      	ldr	r2, [pc, #320]	; (80008b0 <osKernelStackInit+0x19c>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000776:	fb01 f303 	mul.w	r3, r1, r3
 800077a:	4413      	add	r3, r2
 800077c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8000780:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8000784:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-5] = 0x03030303;  //R3
 8000786:	4a4a      	ldr	r2, [pc, #296]	; (80008b0 <osKernelStackInit+0x19c>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800078e:	fb01 f303 	mul.w	r3, r1, r3
 8000792:	4413      	add	r3, r2
 8000794:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8000798:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800079c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-6] = 0x02020202;  //R2
 800079e:	4a44      	ldr	r2, [pc, #272]	; (80008b0 <osKernelStackInit+0x19c>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007a6:	fb01 f303 	mul.w	r3, r1, r3
 80007aa:	4413      	add	r3, r2
 80007ac:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80007b0:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80007b4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-7] = 0x01010101;  //R1
 80007b6:	4a3e      	ldr	r2, [pc, #248]	; (80008b0 <osKernelStackInit+0x19c>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007be:	fb01 f303 	mul.w	r3, r1, r3
 80007c2:	4413      	add	r3, r2
 80007c4:	f503 7341 	add.w	r3, r3, #772	; 0x304
 80007c8:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80007cc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-8] = 0x00000000;  //R0
 80007ce:	4a38      	ldr	r2, [pc, #224]	; (80008b0 <osKernelStackInit+0x19c>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007d6:	fb01 f303 	mul.w	r3, r1, r3
 80007da:	4413      	add	r3, r2
 80007dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
	  /*We have to save manually*/
	TCB_STACK[i][STACKSIZE-9] = 0x11111111;  //R11
 80007e4:	4a32      	ldr	r2, [pc, #200]	; (80008b0 <osKernelStackInit+0x19c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007ec:	fb01 f303 	mul.w	r3, r1, r3
 80007f0:	4413      	add	r3, r2
 80007f2:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80007f6:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80007fa:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-10] = 0x10101010; //R10
 80007fc:	4a2c      	ldr	r2, [pc, #176]	; (80008b0 <osKernelStackInit+0x19c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000804:	fb01 f303 	mul.w	r3, r1, r3
 8000808:	4413      	add	r3, r2
 800080a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800080e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8000812:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-11] = 0x09090909; //R9
 8000814:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <osKernelStackInit+0x19c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f44f 7148 	mov.w	r1, #800	; 0x320
 800081c:	fb01 f303 	mul.w	r3, r1, r3
 8000820:	4413      	add	r3, r2
 8000822:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8000826:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800082a:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-12] = 0x08080808; //R8
 800082c:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <osKernelStackInit+0x19c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000834:	fb01 f303 	mul.w	r3, r1, r3
 8000838:	4413      	add	r3, r2
 800083a:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 800083e:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8000842:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-13] = 0x07070707; //R7
 8000844:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <osKernelStackInit+0x19c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f44f 7148 	mov.w	r1, #800	; 0x320
 800084c:	fb01 f303 	mul.w	r3, r1, r3
 8000850:	4413      	add	r3, r2
 8000852:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8000856:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800085a:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-14] = 0x06060606; //R6
 800085c:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <osKernelStackInit+0x19c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000864:	fb01 f303 	mul.w	r3, r1, r3
 8000868:	4413      	add	r3, r2
 800086a:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800086e:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8000872:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-15] = 0x05050505; //R5
 8000874:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <osKernelStackInit+0x19c>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f44f 7148 	mov.w	r1, #800	; 0x320
 800087c:	fb01 f303 	mul.w	r3, r1, r3
 8000880:	4413      	add	r3, r2
 8000882:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8000886:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800088a:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-16] = 0x04040404; //R4
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <osKernelStackInit+0x19c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000894:	fb01 f303 	mul.w	r3, r1, r3
 8000898:	4413      	add	r3, r2
 800089a:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800089e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000124 	.word	0x20000124
 80008b4:	20000094 	.word	0x20000094

080008b8 <osKernelCreateTask>:

taskHandleT osKernelCreateTask( taskT task,uint32_t priority){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c2:	b672      	cpsid	i
}
 80008c4:	bf00      	nop
	__disable_irq();

	 if (NumTasks == NUM_OF_TASKS || task == NULL || (priority == 255 && NumTasks > 0) || priority > 255) {
 80008c6:	4b52      	ldr	r3, [pc, #328]	; (8000a10 <osKernelCreateTask+0x158>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	d00c      	beq.n	80008e8 <osKernelCreateTask+0x30>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d009      	beq.n	80008e8 <osKernelCreateTask+0x30>
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2bff      	cmp	r3, #255	; 0xff
 80008d8:	d103      	bne.n	80008e2 <osKernelCreateTask+0x2a>
 80008da:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <osKernelCreateTask+0x158>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	dc02      	bgt.n	80008e8 <osKernelCreateTask+0x30>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d901      	bls.n	80008ec <osKernelCreateTask+0x34>
	        return -1;
 80008e8:	23ff      	movs	r3, #255	; 0xff
 80008ea:	e08c      	b.n	8000a06 <osKernelCreateTask+0x14e>
	    }
	if(NumTasks<NUM_OF_TASKS-1){
 80008ec:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <osKernelCreateTask+0x158>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	dc13      	bgt.n	800091c <osKernelCreateTask+0x64>
		tcbs[NumTasks].nextPt = &tcbs[NumTasks+1];
 80008f4:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <osKernelCreateTask+0x158>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1c59      	adds	r1, r3, #1
 80008fa:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <osKernelCreateTask+0x158>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	460b      	mov	r3, r1
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	1a5b      	subs	r3, r3, r1
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4943      	ldr	r1, [pc, #268]	; (8000a14 <osKernelCreateTask+0x15c>)
 8000908:	4419      	add	r1, r3
 800090a:	4842      	ldr	r0, [pc, #264]	; (8000a14 <osKernelCreateTask+0x15c>)
 800090c:	4613      	mov	r3, r2
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4403      	add	r3, r0
 8000916:	3304      	adds	r3, #4
 8000918:	6019      	str	r1, [r3, #0]
 800091a:	e00e      	b.n	800093a <osKernelCreateTask+0x82>
	}else if(NumTasks == NUM_OF_TASKS-1){
 800091c:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <osKernelCreateTask+0x158>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b04      	cmp	r3, #4
 8000922:	d10a      	bne.n	800093a <osKernelCreateTask+0x82>
		tcbs[NumTasks].nextPt = &tcbs[0];}
 8000924:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <osKernelCreateTask+0x158>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	493a      	ldr	r1, [pc, #232]	; (8000a14 <osKernelCreateTask+0x15c>)
 800092a:	4613      	mov	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	440b      	add	r3, r1
 8000934:	3304      	adds	r3, #4
 8000936:	4a37      	ldr	r2, [pc, #220]	; (8000a14 <osKernelCreateTask+0x15c>)
 8000938:	601a      	str	r2, [r3, #0]

    osKernelStackInit(NumTasks);TCB_STACK[NumTasks][STACKSIZE-2] = (int32_t)(task); /*Init PC*/
 800093a:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <osKernelCreateTask+0x158>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fee8 	bl	8000714 <osKernelStackInit>
 8000944:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <osKernelCreateTask+0x158>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4933      	ldr	r1, [pc, #204]	; (8000a18 <osKernelCreateTask+0x160>)
 800094c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000950:	fb00 f303 	mul.w	r3, r0, r3
 8000954:	440b      	add	r3, r1
 8000956:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800095a:	601a      	str	r2, [r3, #0]
	tcbs[NumTasks].priority = priority;
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <osKernelCreateTask+0x158>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b2d8      	uxtb	r0, r3
 8000964:	492b      	ldr	r1, [pc, #172]	; (8000a14 <osKernelCreateTask+0x15c>)
 8000966:	4613      	mov	r3, r2
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	1a9b      	subs	r3, r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	3308      	adds	r3, #8
 8000972:	4602      	mov	r2, r0
 8000974:	701a      	strb	r2, [r3, #0]
	tcbs[NumTasks].originalPriority = priority;
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <osKernelCreateTask+0x158>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2d8      	uxtb	r0, r3
 800097e:	4925      	ldr	r1, [pc, #148]	; (8000a14 <osKernelCreateTask+0x15c>)
 8000980:	4613      	mov	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	1a9b      	subs	r3, r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	3309      	adds	r3, #9
 800098c:	4602      	mov	r2, r0
 800098e:	701a      	strb	r2, [r3, #0]
	tcbs[NumTasks].id = NumTasks;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <osKernelCreateTask+0x158>)
 8000992:	6819      	ldr	r1, [r3, #0]
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <osKernelCreateTask+0x158>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	b2c8      	uxtb	r0, r1
 800099a:	491e      	ldr	r1, [pc, #120]	; (8000a14 <osKernelCreateTask+0x15c>)
 800099c:	4613      	mov	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	1a9b      	subs	r3, r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	330a      	adds	r3, #10
 80009a8:	4602      	mov	r2, r0
 80009aa:	701a      	strb	r2, [r3, #0]
	tcbs[NumTasks].sleepTime = 0;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <osKernelCreateTask+0x158>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4918      	ldr	r1, [pc, #96]	; (8000a14 <osKernelCreateTask+0x15c>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	440b      	add	r3, r1
 80009bc:	330c      	adds	r3, #12
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
	tcbs[NumTasks].sleepTimeLeft = 0;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <osKernelCreateTask+0x158>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4913      	ldr	r1, [pc, #76]	; (8000a14 <osKernelCreateTask+0x15c>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	1a9b      	subs	r3, r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	3310      	adds	r3, #16
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
	tcbs[NumTasks].lastWakeTime = 0;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <osKernelCreateTask+0x158>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	490d      	ldr	r1, [pc, #52]	; (8000a14 <osKernelCreateTask+0x15c>)
 80009de:	4613      	mov	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	1a9b      	subs	r3, r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	440b      	add	r3, r1
 80009e8:	3314      	adds	r3, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]

	NumTasks++;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <osKernelCreateTask+0x158>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <osKernelCreateTask+0x158>)
 80009f6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009f8:	b662      	cpsie	i
}
 80009fa:	bf00      	nop
	__enable_irq();
	return (NumTasks-1);
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <osKernelCreateTask+0x158>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	3b01      	subs	r3, #1
 8000a04:	b2db      	uxtb	r3, r3

}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000090 	.word	0x20000090
 8000a14:	20000094 	.word	0x20000094
 8000a18:	20000124 	.word	0x20000124

08000a1c <osKernelCreatePeriodc_Task>:


ptaskHandleT osKernelCreatePeriodc_Task(taskT ptask, uint32_t msPeriod){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	  if(NumPeriodicTasks ==  NUM_PERIODIC_TASKS || msPeriod == 0){
 8000a26:	4b29      	ldr	r3, [pc, #164]	; (8000acc <osKernelCreatePeriodc_Task+0xb0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d002      	beq.n	8000a34 <osKernelCreatePeriodc_Task+0x18>
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <osKernelCreatePeriodc_Task+0x1c>
		  return -1;
 8000a34:	23ff      	movs	r3, #255	; 0xff
 8000a36:	e044      	b.n	8000ac2 <osKernelCreatePeriodc_Task+0xa6>
		}

		PeriodicTasks[NumPeriodicTasks].task = ptask;
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <osKernelCreatePeriodc_Task+0xb0>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4924      	ldr	r1, [pc, #144]	; (8000ad0 <osKernelCreatePeriodc_Task+0xb4>)
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	440b      	add	r3, r1
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	601a      	str	r2, [r3, #0]
		if(TICK_TIMER_ENABLE){
		PeriodicTasks[NumPeriodicTasks].period = msPeriod;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <osKernelCreatePeriodc_Task+0xb0>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	491f      	ldr	r1, [pc, #124]	; (8000ad0 <osKernelCreatePeriodc_Task+0xb4>)
 8000a52:	4613      	mov	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	440b      	add	r3, r1
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	601a      	str	r2, [r3, #0]
		PeriodicTasks[NumPeriodicTasks].timeLeft =  msPeriod-1;}
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	1e59      	subs	r1, r3, #1
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <osKernelCreatePeriodc_Task+0xb0>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4608      	mov	r0, r1
 8000a6c:	4918      	ldr	r1, [pc, #96]	; (8000ad0 <osKernelCreatePeriodc_Task+0xb4>)
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	440b      	add	r3, r1
 8000a78:	3308      	adds	r3, #8
 8000a7a:	6018      	str	r0, [r3, #0]
		else{
			PeriodicTasks[NumPeriodicTasks].period = MS_to_Quantas(msPeriod);
			PeriodicTasks[NumPeriodicTasks].timeLeft =  MS_to_Quantas(msPeriod)-1;

		}
		PeriodicTasks[NumPeriodicTasks].suspended =  0;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <osKernelCreatePeriodc_Task+0xb0>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4913      	ldr	r1, [pc, #76]	; (8000ad0 <osKernelCreatePeriodc_Task+0xb4>)
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	440b      	add	r3, r1
 8000a8c:	330d      	adds	r3, #13
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
		PeriodicTasks[NumPeriodicTasks].id =  NumPeriodicTasks;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <osKernelCreatePeriodc_Task+0xb0>)
 8000a94:	6819      	ldr	r1, [r3, #0]
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <osKernelCreatePeriodc_Task+0xb0>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	b2c8      	uxtb	r0, r1
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <osKernelCreatePeriodc_Task+0xb4>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	440b      	add	r3, r1
 8000aa8:	330c      	adds	r3, #12
 8000aaa:	4602      	mov	r2, r0
 8000aac:	701a      	strb	r2, [r3, #0]
		NumPeriodicTasks++;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <osKernelCreatePeriodc_Task+0xb0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <osKernelCreatePeriodc_Task+0xb0>)
 8000ab6:	6013      	str	r3, [r2, #0]
		return (NumPeriodicTasks-1);
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <osKernelCreatePeriodc_Task+0xb0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	2000008c 	.word	0x2000008c
 8000ad0:	2000005c 	.word	0x2000005c

08000ad4 <userIdleTask>:
	while(1){
		kernelIdleCount++;	}

}

void userIdleTask(void){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while(1){
		userIdleHook();	}
 8000ad8:	f7ff fb8e 	bl	80001f8 <userIdleHook>
 8000adc:	e7fc      	b.n	8000ad8 <userIdleTask+0x4>
	...

08000ae0 <osKernelInit>:

}

void osKernelInit(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

	MILLIS_PRESCELAR = (BUS_FREQ/1000);
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <osKernelInit+0x18>)
 8000ae6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000aea:	601a      	str	r2, [r3, #0]

	if(!USER_IDLE_TASK_ENABLE){
	osKernelCreateTask(&KernelIdleTask, IDLE_TASK_PRIORITY);
	}else{
	osKernelCreateTask(&userIdleTask, IDLE_TASK_PRIORITY);
 8000aec:	21ff      	movs	r1, #255	; 0xff
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <osKernelInit+0x1c>)
 8000af0:	f7ff fee2 	bl	80008b8 <osKernelCreateTask>


	}
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000054 	.word	0x20000054
 8000afc:	08000ad5 	.word	0x08000ad5

08000b00 <osKernelLaunch>:

void osKernelLaunch(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

	currentPt=findFirstHighestPriorityTask();
 8000b04:	f000 f8c8 	bl	8000c98 <findFirstHighestPriorityTask>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <osKernelLaunch+0x7c>)
 8000b0c:	6013      	str	r3, [r2, #0]
	//reset systick
	SysTick -> CTRL = 0;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <osKernelLaunch+0x80>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
	//clear current value register
	SysTick -> VAL = 0;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <osKernelLaunch+0x80>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]

	//load quanta value
	systickLoadVal=(MS_QUANTA*MILLIS_PRESCELAR) - 1;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <osKernelLaunch+0x84>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	3b01      	subs	r3, #1
 8000b28:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <osKernelLaunch+0x88>)
 8000b2a:	6013      	str	r3, [r2, #0]

	SysTick -> LOAD = (MS_QUANTA*MILLIS_PRESCELAR) - 1;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <osKernelLaunch+0x84>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4613      	mov	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <osKernelLaunch+0x80>)
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]


	NVIC_SetPriority(SysTick_IRQn, 7/* priority value */);
 8000b3e:	2107      	movs	r1, #7
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f7ff fdbc 	bl	80006c0 <__NVIC_SetPriority>

	// Set PendSV priority
	NVIC_SetPriority(PendSV_IRQn, 15/* lowest priority value */);
 8000b48:	210f      	movs	r1, #15
 8000b4a:	f06f 0001 	mvn.w	r0, #1
 8000b4e:	f7ff fdb7 	bl	80006c0 <__NVIC_SetPriority>

	// enable systick and select internal clock
	//SysTick -> CTRL = CTRL_ENABLE | CTRL_CLCKSRC;
	SysTick -> CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <osKernelLaunch+0x80>)
 8000b54:	2205      	movs	r2, #5
 8000b56:	601a      	str	r2, [r3, #0]


	//enable systick interrupt
	//SysTick -> CTRL |= CTRL_TICKINT ;
	SysTick -> CTRL |= SysTick_CTRL_TICKINT_Msk ;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <osKernelLaunch+0x80>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <osKernelLaunch+0x80>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	6013      	str	r3, [r2, #0]

	if(TICK_TIMER_ENABLE) tickTimer_Init(TICK_TIMER,1000,6);
 8000b64:	2206      	movs	r2, #6
 8000b66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b6e:	f000 f9db 	bl	8000f28 <tickTimer_Init>

	osSchedulerLaunch();
 8000b72:	f000 f821 	bl	8000bb8 <osSchedulerLaunch>

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000120 	.word	0x20000120
 8000b80:	e000e010 	.word	0xe000e010
 8000b84:	20000054 	.word	0x20000054
 8000b88:	20000058 	.word	0x20000058

08000b8c <PendSV_Handler>:
	 are saved automatically in the stack*/

	//**suspend current thread

		//disable global interrupt
		__asm("CPSID	I");
 8000b8c:	b672      	cpsid	i

		//save r4,r5,r6,r7,r8,r9,r10,r11
		__asm("PUSH	{R4-R11}");
 8000b8e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

		//load adresse of currentPt int r0
		__asm("LDR R0,=currentPt");
 8000b92:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <PendSV_Handler+0x28>)

		//load r1 from address equal r0 ==>( r1=currentPt)
		__asm("LDR R1,[R0]");
 8000b94:	6801      	ldr	r1, [r0, #0]

		//Store the Cortex-M SP at address equal r1 ==> (save the MCU SP into tcb)
		__asm("STR SP,[R1]");
 8000b96:	f8c1 d000 	str.w	sp, [r1]
		/* the next thread can be the periodic thread so in this
		   section we will check if the period of the periodic thread
		   has elapsed and execute it
		 */

		__asm("PUSH  {R0,LR}" );
 8000b9a:	b501      	push	{r0, lr}
		__asm("BL	osPriorityScheduler");
 8000b9c:	f000 f848 	bl	8000c30 <osPriorityScheduler>
		__asm("POP {R0,LR}");
 8000ba0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

//=====================================================================================================
		 __asm("LDR R1,[R0]");
 8000ba4:	6801      	ldr	r1, [r0, #0]


//=======================================================================================================
		//load cortex-m SP from address equal r1 ==>( SP=currentPt->stackPt)
		__asm("LDR SP,[R1]");
 8000ba6:	f8d1 d000 	ldr.w	sp, [r1]

		//restore r4,r5,r6,r7,r8,r9,r10,r11
		__asm("POP {R4-R11}");
 8000baa:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

		//enable globale interrupt
		__asm("CPSIE	I");
 8000bae:	b662      	cpsie	i

		/* return from exception and restore r0,r1,r2,r3,r12,lr,pc,psr */
		__asm("BX       LR");
 8000bb0:	4770      	bx	lr

}
 8000bb2:	bf00      	nop
 8000bb4:	20000120 	.word	0x20000120

08000bb8 <osSchedulerLaunch>:

void osSchedulerLaunch(void){
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

	// load address of currentPt into r0
	__asm("LDR R0,=currentPt");
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <osSchedulerLaunch+0x2c>)

	//load r2 from address equal r0 ,r2=currentPt
	__asm("LDR R2,[R0]");
 8000bbe:	6802      	ldr	r2, [r0, #0]

	//load cortex-M SP from address equals r2 , SP=currentPt
	__asm("LDR SP,[R2]");
 8000bc0:	f8d2 d000 	ldr.w	sp, [r2]

	//Restore r4 -- r11
	__asm("POP {R4-R11}");
 8000bc4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//Restore r12
	__asm("POP {R12}");
 8000bc8:	f85d cb04 	ldr.w	ip, [sp], #4

	//Restore r0,r1,r2,r3
	__asm("POP {R0-R3}");
 8000bcc:	bc0f      	pop	{r0, r1, r2, r3}

	//skip LR
	__asm("ADD  SP,SP,#4");
 8000bce:	b001      	add	sp, #4

	//create a new start location by popping LR
	__asm("POP {LR}");
 8000bd0:	f85d eb04 	ldr.w	lr, [sp], #4

	//skip PSR by adding 4 to SP
	__asm("ADD  SP,SP,#4");
 8000bd4:	b001      	add	sp, #4

	//enable global interrupt
	__asm("CPSIE	 I");
 8000bd6:	b662      	cpsie	i

	//return from exception
	__asm("BX    LR");}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	0000      	.short	0x0000
 8000be4:	20000120 	.word	0x20000120

08000be8 <osThredYield>:



	void osThredYield(void){
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
		//this function trigger the systick exception

		//clear systick current val
		//SysTick -> VAL = 0 ;
		if (TICK_TIMER_ENABLE)  SysTick -> VAL = systickLoadVal;
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <osThredYield+0x20>)
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <osThredYield+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6093      	str	r3, [r2, #8]
		//SCB -> ICSR = PENDSTSET;

		//triger PendSV

		//*****SCB -> ICSR |= PENDSVSET;
		SCB -> ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <osThredYield+0x28>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <osThredYield+0x28>)
 8000bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	6053      	str	r3, [r2, #4]


	}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	e000e010 	.word	0xe000e010
 8000c0c:	20000058 	.word	0x20000058
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <SysTick_Handler>:

	void SysTick_Handler(void){
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
		//the systick handler will be responsible for trigger the PendSv exeption
		if(!TICK_TIMER_ENABLE){
		nbTick++;}
		//*****SCB -> ICSR |= PENDSVSET;
		SCB -> ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Handler+0x18>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <SysTick_Handler+0x18>)
 8000c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c22:	6053      	str	r3, [r2, #4]
		//fromSystick = 1;

	}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <osPriorityScheduler>:


	void osPriorityScheduler(void)
	{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
		sem_timeout_handle();
 8000c36:	f000 fa21 	bl	800107c <sem_timeout_handle>
		  periodic_events_execute();
 8000c3a:	f000 f869 	bl	8000d10 <periodic_events_execute>
		  tcbType *_currentPt = currentPt;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <osPriorityScheduler+0x64>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	60fb      	str	r3, [r7, #12]
	  	tcbType *nextThreadToRun = _currentPt;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	60bb      	str	r3, [r7, #8]
		  uint16_t highestPriorityFound = 256;
 8000c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4c:	80fb      	strh	r3, [r7, #6]


		 do{
			  _currentPt =_currentPt->nextPt;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	60fb      	str	r3, [r7, #12]
			  if(_currentPt->priority < highestPriorityFound &&
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	7a1b      	ldrb	r3, [r3, #8]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	88fa      	ldrh	r2, [r7, #6]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d90c      	bls.n	8000c7a <osPriorityScheduler+0x4a>
					  !_currentPt->suspended &&
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	7adb      	ldrb	r3, [r3, #11]
			  if(_currentPt->priority < highestPriorityFound &&
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d108      	bne.n	8000c7a <osPriorityScheduler+0x4a>
					  /*_currentPt->sleepTimeLeft <= 0 &&*/
					  !_currentPt -> blocked
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	7e1b      	ldrb	r3, [r3, #24]
					  !_currentPt->suspended &&
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <osPriorityScheduler+0x4a>
					  ){

					 nextThreadToRun =_currentPt;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	60bb      	str	r3, [r7, #8]
						highestPriorityFound = _currentPt->priority;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	7a1b      	ldrb	r3, [r3, #8]
 8000c78:	80fb      	strh	r3, [r7, #6]
			  }
		  }while(_currentPt != currentPt );
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <osPriorityScheduler+0x64>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d1e4      	bne.n	8000c4e <osPriorityScheduler+0x1e>


		  currentPt  =  nextThreadToRun;
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <osPriorityScheduler+0x64>)
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	6013      	str	r3, [r2, #0]




	}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000120 	.word	0x20000120

08000c98 <findFirstHighestPriorityTask>:

	tcbType* findFirstHighestPriorityTask(void){
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
		uint8_t highestPriority = tcbs[0].priority;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <findFirstHighestPriorityTask+0x70>)
 8000ca0:	7a1b      	ldrb	r3, [r3, #8]
 8000ca2:	73fb      	strb	r3, [r7, #15]
		tcbType *firstHighestPriorityTask = &tcbs[0] ;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <findFirstHighestPriorityTask+0x70>)
 8000ca6:	60bb      	str	r3, [r7, #8]

		// Find the task with the highest priority (lowest integer value)
		for (int i = 0; i < NumTasks; i++) {
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	e020      	b.n	8000cf0 <findFirstHighestPriorityTask+0x58>
			if (tcbs[i].priority < highestPriority) {
 8000cae:	4916      	ldr	r1, [pc, #88]	; (8000d08 <findFirstHighestPriorityTask+0x70>)
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d911      	bls.n	8000cea <findFirstHighestPriorityTask+0x52>
				highestPriority = tcbs[i].priority;
 8000cc6:	4910      	ldr	r1, [pc, #64]	; (8000d08 <findFirstHighestPriorityTask+0x70>)
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	1a9b      	subs	r3, r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3308      	adds	r3, #8
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	73fb      	strb	r3, [r7, #15]
				firstHighestPriorityTask = &tcbs[i];
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <findFirstHighestPriorityTask+0x70>)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < NumTasks; i++) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3301      	adds	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <findFirstHighestPriorityTask+0x74>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	dbd9      	blt.n	8000cae <findFirstHighestPriorityTask+0x16>
			}
		}

		// return the task with the first highest priority found
		return(firstHighestPriorityTask);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000094 	.word	0x20000094
 8000d0c:	20000090 	.word	0x20000090

08000d10 <periodic_events_execute>:
		return ((ms + MS_QUANTA / 2) / MS_QUANTA); // Calculate the "rounded" number of quanta


	}

	void periodic_events_execute(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	    for (int i = 0; i < NumPeriodicTasks; i++) {
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	e06c      	b.n	8000df6 <periodic_events_execute+0xe6>
	        if (PeriodicTasks[i].timeLeft <= 0 && !PeriodicTasks[i].suspended) {
 8000d1c:	496b      	ldr	r1, [pc, #428]	; (8000ecc <periodic_events_execute+0x1bc>)
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	dc33      	bgt.n	8000d9a <periodic_events_execute+0x8a>
 8000d32:	4966      	ldr	r1, [pc, #408]	; (8000ecc <periodic_events_execute+0x1bc>)
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	330d      	adds	r3, #13
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d128      	bne.n	8000d9a <periodic_events_execute+0x8a>
	            PeriodicTasks[i].task();
 8000d48:	4960      	ldr	r1, [pc, #384]	; (8000ecc <periodic_events_execute+0x1bc>)
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	440b      	add	r3, r1
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4798      	blx	r3
	            PeriodicTasks[i].timeLeft = PeriodicTasks[i].period - 1;
 8000d5a:	495c      	ldr	r1, [pc, #368]	; (8000ecc <periodic_events_execute+0x1bc>)
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	3304      	adds	r3, #4
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	4618      	mov	r0, r3
 8000d70:	4956      	ldr	r1, [pc, #344]	; (8000ecc <periodic_events_execute+0x1bc>)
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	440b      	add	r3, r1
 8000d7e:	3308      	adds	r3, #8
 8000d80:	6018      	str	r0, [r3, #0]
	            PeriodicTasks[i].lastWakeTime=nbTick;
 8000d82:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <periodic_events_execute+0x1c0>)
 8000d84:	6819      	ldr	r1, [r3, #0]
 8000d86:	4851      	ldr	r0, [pc, #324]	; (8000ecc <periodic_events_execute+0x1bc>)
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	4413      	add	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	4403      	add	r3, r0
 8000d94:	3310      	adds	r3, #16
 8000d96:	6019      	str	r1, [r3, #0]
 8000d98:	e02a      	b.n	8000df0 <periodic_events_execute+0xe0>
	        } else if (!PeriodicTasks[i].suspended ) {
 8000d9a:	494c      	ldr	r1, [pc, #304]	; (8000ecc <periodic_events_execute+0x1bc>)
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	440b      	add	r3, r1
 8000da8:	330d      	adds	r3, #13
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d11f      	bne.n	8000df0 <periodic_events_execute+0xe0>

	            PeriodicTasks[i].timeLeft= PeriodicTasks[i].period -(nbTick-PeriodicTasks[i].lastWakeTime);
 8000db0:	4946      	ldr	r1, [pc, #280]	; (8000ecc <periodic_events_execute+0x1bc>)
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	6819      	ldr	r1, [r3, #0]
 8000dc2:	4842      	ldr	r0, [pc, #264]	; (8000ecc <periodic_events_execute+0x1bc>)
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4403      	add	r3, r0
 8000dd0:	3310      	adds	r3, #16
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <periodic_events_execute+0x1c0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	440b      	add	r3, r1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	493b      	ldr	r1, [pc, #236]	; (8000ecc <periodic_events_execute+0x1bc>)
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	3308      	adds	r3, #8
 8000dee:	6018      	str	r0, [r3, #0]
	    for (int i = 0; i < NumPeriodicTasks; i++) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3301      	adds	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <periodic_events_execute+0x1c4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	db8d      	blt.n	8000d1c <periodic_events_execute+0xc>

	        }
	    }

	    for (int i = 0; i < NumTasks; i++) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	e057      	b.n	8000eb6 <periodic_events_execute+0x1a6>
	        if (tcbs[i].sleepTimeLeft > 0 && !tcbs[i].suspended) {
 8000e06:	4934      	ldr	r1, [pc, #208]	; (8000ed8 <periodic_events_execute+0x1c8>)
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	440b      	add	r3, r1
 8000e14:	3310      	adds	r3, #16
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dd49      	ble.n	8000eb0 <periodic_events_execute+0x1a0>
 8000e1c:	492e      	ldr	r1, [pc, #184]	; (8000ed8 <periodic_events_execute+0x1c8>)
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	4613      	mov	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	330b      	adds	r3, #11
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d13e      	bne.n	8000eb0 <periodic_events_execute+0x1a0>
	            tcbs[i].sleepTimeLeft=tcbs[i].sleepTime-(nbTick-tcbs[i].lastWakeTime);
 8000e32:	4929      	ldr	r1, [pc, #164]	; (8000ed8 <periodic_events_execute+0x1c8>)
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	330c      	adds	r3, #12
 8000e42:	6819      	ldr	r1, [r3, #0]
 8000e44:	4824      	ldr	r0, [pc, #144]	; (8000ed8 <periodic_events_execute+0x1c8>)
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	1a9b      	subs	r3, r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4403      	add	r3, r0
 8000e52:	3314      	adds	r3, #20
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <periodic_events_execute+0x1c0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	440b      	add	r3, r1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	491d      	ldr	r1, [pc, #116]	; (8000ed8 <periodic_events_execute+0x1c8>)
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	3310      	adds	r3, #16
 8000e70:	6018      	str	r0, [r3, #0]

	        if(tcbs[i].sleepTimeLeft <= 0){
 8000e72:	4919      	ldr	r1, [pc, #100]	; (8000ed8 <periodic_events_execute+0x1c8>)
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	4613      	mov	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	1a9b      	subs	r3, r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	3310      	adds	r3, #16
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dc13      	bgt.n	8000eb0 <periodic_events_execute+0x1a0>
	            tcbs[i].sleepTimeLeft = 0;  // Ensure non-negative sleep time
 8000e88:	4913      	ldr	r1, [pc, #76]	; (8000ed8 <periodic_events_execute+0x1c8>)
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	1a9b      	subs	r3, r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	3310      	adds	r3, #16
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
	        	tcbs[i].blocked=0;
 8000e9c:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <periodic_events_execute+0x1c8>)
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3318      	adds	r3, #24
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; i < NumTasks; i++) {
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <periodic_events_execute+0x1cc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dba2      	blt.n	8000e06 <periodic_events_execute+0xf6>
	        }
	      }
	    }


	}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000005c 	.word	0x2000005c
 8000ed0:	20000050 	.word	0x20000050
 8000ed4:	2000008c 	.word	0x2000008c
 8000ed8:	20000094 	.word	0x20000094
 8000edc:	20000090 	.word	0x20000090

08000ee0 <osThreadSleep>:
    return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////

	void osThreadSleep(uint32_t ms){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
	__disable_irq();
	if(TICK_TIMER_ENABLE){
	currentPt->sleepTime = ms;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <osThreadSleep+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	60da      	str	r2, [r3, #12]
	currentPt->sleepTimeLeft=ms;}
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <osThreadSleep+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	611a      	str	r2, [r3, #16]
	else{
		currentPt->sleepTime = MS_to_Quantas(ms);
		currentPt->sleepTimeLeft= MS_to_Quantas(ms);

	}
	currentPt->lastWakeTime=nbTick;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <osThreadSleep+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <osThreadSleep+0x44>)
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	615a      	str	r2, [r3, #20]
	currentPt->blocked=1;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <osThreadSleep+0x40>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	761a      	strb	r2, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f0e:	b662      	cpsie	i
}
 8000f10:	bf00      	nop
	__enable_irq();
	osThredYield();
 8000f12:	f7ff fe69 	bl	8000be8 <osThredYield>

}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000120 	.word	0x20000120
 8000f24:	20000050 	.word	0x20000050

08000f28 <tickTimer_Init>:
/////////////////////////////////////////////////////////////////////////////

	void tickTimer_Init(TIM_TypeDef *timer,uint32_t freq, uint8_t priority){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	4613      	mov	r3, r2
 8000f34:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f36:	b672      	cpsid	i
}
 8000f38:	bf00      	nop

		__disable_irq();

	   	if(timer == TIM2){
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f40:	d10e      	bne.n	8000f60 <tickTimer_Init+0x38>
			   RCC->APB1ENR |=RCC_APB1ENR_TIM2EN;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <tickTimer_Init+0xb4>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <tickTimer_Init+0xb4>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
				 NVIC_SetPriority(TIM2_IRQn,priority);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4619      	mov	r1, r3
 8000f52:	201c      	movs	r0, #28
 8000f54:	f7ff fbb4 	bl	80006c0 <__NVIC_SetPriority>
				 NVIC_EnableIRQ(TIM2_IRQn);
 8000f58:	201c      	movs	r0, #28
 8000f5a:	f7ff fb95 	bl	8000688 <__NVIC_EnableIRQ>
 8000f5e:	e024      	b.n	8000faa <tickTimer_Init+0x82>

		}else if (timer == TIM3){
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <tickTimer_Init+0xb8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d10e      	bne.n	8000f86 <tickTimer_Init+0x5e>
			   RCC->APB1ENR |=RCC_APB1ENR_TIM3EN;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <tickTimer_Init+0xb4>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <tickTimer_Init+0xb4>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
				 NVIC_SetPriority(TIM3_IRQn,priority);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4619      	mov	r1, r3
 8000f78:	201d      	movs	r0, #29
 8000f7a:	f7ff fba1 	bl	80006c0 <__NVIC_SetPriority>
				 NVIC_EnableIRQ(TIM3_IRQn);
 8000f7e:	201d      	movs	r0, #29
 8000f80:	f7ff fb82 	bl	8000688 <__NVIC_EnableIRQ>
 8000f84:	e011      	b.n	8000faa <tickTimer_Init+0x82>

		}else if (timer == TIM4){
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <tickTimer_Init+0xbc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d10d      	bne.n	8000faa <tickTimer_Init+0x82>
			   RCC->APB1ENR |=RCC_APB1ENR_TIM4EN;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <tickTimer_Init+0xb4>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <tickTimer_Init+0xb4>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
				 NVIC_SetPriority(TIM4_IRQn,priority);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	201e      	movs	r0, #30
 8000fa0:	f7ff fb8e 	bl	80006c0 <__NVIC_SetPriority>
				 NVIC_EnableIRQ(TIM4_IRQn);
 8000fa4:	201e      	movs	r0, #30
 8000fa6:	f7ff fb6f 	bl	8000688 <__NVIC_EnableIRQ>

		}
	   timer->PSC =  16-1;    /* 16 000 000 / 16 = 1 000 000*/
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	220f      	movs	r2, #15
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
	   timer->ARR =  (1000000/freq)-1;
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <tickTimer_Init+0xc0>)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb8:	1e5a      	subs	r2, r3, #1
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
	   timer->CR1 =1;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
	   timer->DIER |=1;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f043 0201 	orr.w	r2, r3, #1
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fd0:	b662      	cpsie	i
}
 8000fd2:	bf00      	nop



		__enable_irq();

	}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40000400 	.word	0x40000400
 8000fe4:	40000800 	.word	0x40000800
 8000fe8:	000f4240 	.word	0x000f4240

08000fec <TIM2_IRQHandler>:

	////////////////////////////////////////////////////////////////////////////////////////


	void TIM2_IRQHandler(void){
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
	  TIM2->SR  =0;
 8000ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
	  nbTick++;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <TIM2_IRQHandler+0x20>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a03      	ldr	r2, [pc, #12]	; (800100c <TIM2_IRQHandler+0x20>)
 8001000:	6013      	str	r3, [r2, #0]
	}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000050 	.word	0x20000050

08001010 <TIM3_IRQHandler>:
	void TIM3_IRQHandler(void){
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
	  TIM3->SR  =0;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <TIM3_IRQHandler+0x1c>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
	  nbTick++;
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <TIM3_IRQHandler+0x20>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	4a03      	ldr	r2, [pc, #12]	; (8001030 <TIM3_IRQHandler+0x20>)
 8001022:	6013      	str	r3, [r2, #0]
	}	void TIM4_IRQHandler(void){
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40000400 	.word	0x40000400
 8001030:	20000050 	.word	0x20000050

08001034 <TIM4_IRQHandler>:
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
		  TIM4->SR  =0;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <TIM4_IRQHandler+0x1c>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
		  nbTick++;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <TIM4_IRQHandler+0x20>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a03      	ldr	r2, [pc, #12]	; (8001054 <TIM4_IRQHandler+0x20>)
 8001046:	6013      	str	r3, [r2, #0]
		}	void TIM5_IRQHandler(void){
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40000800 	.word	0x40000800
 8001054:	20000050 	.word	0x20000050

08001058 <TIM5_IRQHandler>:
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
			  TIM5->SR  =0;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <TIM5_IRQHandler+0x1c>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
			  nbTick++;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <TIM5_IRQHandler+0x20>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	4a03      	ldr	r2, [pc, #12]	; (8001078 <TIM5_IRQHandler+0x20>)
 800106a:	6013      	str	r3, [r2, #0]
			}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40000c00 	.word	0x40000c00
 8001078:	20000050 	.word	0x20000050

0800107c <sem_timeout_handle>:

		////////////////////////////////////////////////////////////////

		  void sem_timeout_handle(void){
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
			    if (Semaphores == NULL) {
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <sem_timeout_handle+0xa4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d045      	beq.n	8001116 <sem_timeout_handle+0x9a>
			        return; // No semaphores to process
			    }

			  for(int i=0;i<numSems;i++){
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e03c      	b.n	800110a <sem_timeout_handle+0x8e>
			        semaphoreT* sem = &Semaphores[i]; // Cache semaphore reference to avoid repeated array access
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <sem_timeout_handle+0xa4>)
 8001092:	6819      	ldr	r1, [r3, #0]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4613      	mov	r3, r2
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	607b      	str	r3, [r7, #4]
				  for(int j=0;j<NumTasks;j++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	e028      	b.n	80010fa <sem_timeout_handle+0x7e>
					  if((sem->timeoutRecords[j]>0) &&
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	3206      	adds	r2, #6
 80010ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d01e      	beq.n	80010f4 <sem_timeout_handle+0x78>
						((nbTick - sem->WaitStartTimeRecords[j])>=sem->timeoutRecords[j])){
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <sem_timeout_handle+0xa8>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	1ad2      	subs	r2, r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	3106      	adds	r1, #6
 80010cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
					  if((sem->timeoutRecords[j]>0) &&
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d30f      	bcc.n	80010f4 <sem_timeout_handle+0x78>
						  tcbs[j].blocked=0;
 80010d4:	4914      	ldr	r1, [pc, #80]	; (8001128 <sem_timeout_handle+0xac>)
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	1a9b      	subs	r3, r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	3318      	adds	r3, #24
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
						  sem->timeoutRecords[j]=0;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	3206      	adds	r2, #6
 80010ee:	2100      	movs	r1, #0
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  for(int j=0;j<NumTasks;j++){
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <sem_timeout_handle+0xb0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbd1      	blt.n	80010a8 <sem_timeout_handle+0x2c>
			  for(int i=0;i<numSems;i++){
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3301      	adds	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <sem_timeout_handle+0xb4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d3bd      	bcc.n	8001090 <sem_timeout_handle+0x14>
 8001114:	e000      	b.n	8001118 <sem_timeout_handle+0x9c>
			        return; // No semaphores to process
 8001116:	bf00      	nop
					  }

				  }
			  }
			  }
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	200010c8 	.word	0x200010c8
 8001124:	20000050 	.word	0x20000050
 8001128:	20000094 	.word	0x20000094
 800112c:	20000090 	.word	0x20000090
 8001130:	200010c4 	.word	0x200010c4

08001134 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001136:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001138:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <LoopForever+0x6>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	; (8001174 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopForever+0xe>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	; (8001180 <LoopForever+0x16>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001162:	f000 f811 	bl	8001188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001166:	f7ff f871 	bl	800024c <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   r0, =_estack
 800116c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001178:	08001268 	.word	0x08001268
  ldr r2, =_sbss
 800117c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001180:	200010cc 	.word	0x200010cc

08001184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_2_IRQHandler>
	...

08001188 <__libc_init_array>:
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	2600      	movs	r6, #0
 800118c:	4d0c      	ldr	r5, [pc, #48]	; (80011c0 <__libc_init_array+0x38>)
 800118e:	4c0d      	ldr	r4, [pc, #52]	; (80011c4 <__libc_init_array+0x3c>)
 8001190:	1b64      	subs	r4, r4, r5
 8001192:	10a4      	asrs	r4, r4, #2
 8001194:	42a6      	cmp	r6, r4
 8001196:	d109      	bne.n	80011ac <__libc_init_array+0x24>
 8001198:	f000 f81a 	bl	80011d0 <_init>
 800119c:	2600      	movs	r6, #0
 800119e:	4d0a      	ldr	r5, [pc, #40]	; (80011c8 <__libc_init_array+0x40>)
 80011a0:	4c0a      	ldr	r4, [pc, #40]	; (80011cc <__libc_init_array+0x44>)
 80011a2:	1b64      	subs	r4, r4, r5
 80011a4:	10a4      	asrs	r4, r4, #2
 80011a6:	42a6      	cmp	r6, r4
 80011a8:	d105      	bne.n	80011b6 <__libc_init_array+0x2e>
 80011aa:	bd70      	pop	{r4, r5, r6, pc}
 80011ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80011b0:	4798      	blx	r3
 80011b2:	3601      	adds	r6, #1
 80011b4:	e7ee      	b.n	8001194 <__libc_init_array+0xc>
 80011b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80011ba:	4798      	blx	r3
 80011bc:	3601      	adds	r6, #1
 80011be:	e7f2      	b.n	80011a6 <__libc_init_array+0x1e>
 80011c0:	08001260 	.word	0x08001260
 80011c4:	08001260 	.word	0x08001260
 80011c8:	08001260 	.word	0x08001260
 80011cc:	08001264 	.word	0x08001264

080011d0 <_init>:
 80011d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d2:	bf00      	nop
 80011d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011d6:	bc08      	pop	{r3}
 80011d8:	469e      	mov	lr, r3
 80011da:	4770      	bx	lr

080011dc <_fini>:
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	bf00      	nop
 80011e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011e2:	bc08      	pop	{r3}
 80011e4:	469e      	mov	lr, r3
 80011e6:	4770      	bx	lr
